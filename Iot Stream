class AdaptativeHoeffdingTree(object):

    def __init__(self):

    def __str__(self):
    
    def reset(self):

    def set_minimum_fraction_of_weight_info_gain(self, m):

    def get_minimum_fraction_of_weight_info_gain(self):

    def set_grace_period(self, grace):

    def set_hoeffding_tie_threshold(self, ht):

    def set_split_confidence(self, sc):

    def compute_hoeffding_bound(self, max_value, confidence, weight):

    def build_classifier(self, dataset):

    def update_classifier(self, instance):

    def distribution_for_instance(self, instance):
    
    def deactivate_node(self, to_deactivate, parent, parent_branch):
    
    def activate_node(self, to_activate, parent, parent_branch):
    
    def try_split(self, node, parent, parent_branch):
    
    def new_learning_node(self):
