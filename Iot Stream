def learnfromInstance(self, X, y, ht, parent: HoeffdingTree.SplitNode, parentBranch: int):
            ClassPrediction = 0
            if (HoeffdingTree.SplitNode.filter_instance_to_leaf(X, parent, parentBranch).node is None):
                ClassPrediction = HoeffdingTree.Node(
                    HoeffdingTree.SplitNode.filter_instance_to_leaf(X, parent, parentBranch).node).get_class_votes(X,
                                                                                                                   ht)


            blCorrect = (y == ClassPrediction)

            if self.estimationErrorWeight is None:
                self.estimationErrorWeight = ADWIN()
            oldError = self.getErrorEstimation()
            self.ErrorChange = self.estimationErrorWeight.setInput(0.0 if blCorrect == True else 1.0)

            if self.ErrorChange == True and oldError > self.getErrorEstimation():
                self.ErrorChange = False

                learnfromInstance(weighted_inst, ht)

            weight_seen = self.get_width_seen()

            if weight_seen - ht.get_weight_seen_at_last_split_evaluation() >= HoeffdingTree.grace_period.getValue() :
                ht._attempt_to_split(self, parent, parentBranch)
                ht.set_weight_seen_at_last_split_evaluation(weight_seen)
